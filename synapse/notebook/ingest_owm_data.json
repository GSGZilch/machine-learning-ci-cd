{
	"name": "ingest_owm_data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkSmallCpu",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7c71a4f6-4c9f-4984-994c-291e982182d4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c9a2b097-83d7-4ec1-8355-dbd181b27e99/resourceGroups/om-ml-ci-cd/providers/Microsoft.Synapse/workspaces/owm-syn-001/bigDataPools/SparkSmallCpu",
				"name": "SparkSmallCpu",
				"type": "Spark",
				"endpoint": "https://owm-syn-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmallCpu",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import requests\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, ArrayType, FloatType, IntegerType\r\n",
					"from pyspark.sql import SparkSession, Row\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import json\r\n",
					"import pandas as pd\r\n",
					"from datetime import datetime"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Parameter cell to define default values for notebook input parameters\r\n",
					"pipeline_trigger_time = \"2022-01-01 12:00:00\"\r\n",
					"location = \"brussels\""
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/location_mapping"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"key_vault_name = 'mlcicd-kv-001'\r\n",
					"\r\n",
					"api_endpoint = TokenLibrary.getSecret(key_vault_name, 'openweathermap-api-endpoint', 'ls_kv_main')\r\n",
					"api_key = TokenLibrary.getSecret(key_vault_name, 'openweathermap-api-key', 'ls_kv_main')\r\n",
					"\r\n",
					"lat = LOCATION_COORDS[location.upper()][\"lat\"]\r\n",
					"lon = LOCATION_COORDS[location.upper()][\"lon\"]\r\n",
					"\r\n",
					"params = {\r\n",
					"    \"lat\": lat,\r\n",
					"    \"lon\": lon,\r\n",
					"    \"appid\": api_key,\r\n",
					"    \"exclude\": \"minutely,hourly,daily\"\r\n",
					"}\r\n",
					"\r\n",
					"resp = requests.get(api_endpoint, params=params)\r\n",
					"data = resp.json()\r\n",
					"print(f\"Status code: {resp.status_code}. Reason: {resp.reason}.\")"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(data)"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data[\"timestamp\"] = pipeline_trigger_time"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"column_names = [\r\n",
					"    \"lat\",\r\n",
					"    \"lon\",\r\n",
					"    \"timezone\",\r\n",
					"    \"timezone_offset\",\r\n",
					"    \"timestamp\",\r\n",
					"    \"dt\",\r\n",
					"    \"sunrise\",\r\n",
					"    \"sunset\",\r\n",
					"    \"temp\",\r\n",
					"    \"feels_like\",\r\n",
					"    \"pressure\",\r\n",
					"    \"humidity\",\r\n",
					"    \"dew_point\",\r\n",
					"    \"uvi\",\r\n",
					"    \"clouds\",\r\n",
					"    \"visibility\",\r\n",
					"    \"wind_speed\",\r\n",
					"    \"wind_deg\",\r\n",
					"    \"wind_gust\",\r\n",
					"    \"weather_id\",\r\n",
					"    \"weather_main\",\r\n",
					"    \"weather_description\",\r\n",
					"    \"weather_icon\"\r\n",
					"]"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = pd.json_normalize(data)\r\n",
					"df = df.explode('current.weather').to_dict(orient='records')\r\n",
					"df = pd.json_normalize(df)\r\n",
					"df.columns = column_names"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dt = datetime.strptime(pipeline_trigger_time, \"%Y-%m-%d %H:%M:%S\")\r\n",
					"\r\n",
					"adls_name = \"owmadls001\"\r\n",
					"container_name = \"dataplatform\"\r\n",
					"\r\n",
					"adls_url = f\"abfss://{container_name}@{adls_name}.dfs.core.windows.net/\"\r\n",
					"\r\n",
					"folder_path = f\"bronze/weather/{location.lower()}/{dt.year}/{dt.month:02d}/{dt.day:02d}\"\r\n",
					"\r\n",
					"file_name = f\"weather_{dt.year}{dt.month:02d}{dt.day:02d}-{dt.hour:02d}{dt.minute:02d}{dt.second:02d}.csv\"\r\n",
					"\r\n",
					"output_path = f\"{adls_url}/{folder_path}/{file_name}\"\r\n",
					"\r\n",
					"df.to_csv(output_path, index=False)"
				],
				"execution_count": 90
			}
		]
	}
}