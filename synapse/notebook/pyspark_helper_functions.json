{
	"name": "pyspark_helper_functions",
	"properties": {
		"folder": {
			"name": "_utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "72fc1b54-eea6-4bb6-9ff5-a3a952c39668"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"from datetime import datetime\r\n",
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import * "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def pyspark_read_csv(path):\r\n",
					"    df = spark.read.load(path, \r\n",
					"        format='csv', \r\n",
					"        header=True)\r\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_dataframe(df, path, partitions, csv=True, parquet=False, json=False):\r\n",
					"    df = df.repartition(partitions)\r\n",
					"\r\n",
					"    if csv: df.write.csv(f\"{path}csv/\", mode='overwrite', header = 'true') \r\n",
					"    if parquet: df.write.parquet(f\"{path}parquet/\", mode='overwrite') \r\n",
					"    if json: df.write.json(f\"{path}json/\", mode='overwrite')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_adls_folder_path(dt, tier, location):\r\n",
					"    return f\"abfss://dataplatform@owmadls001.dfs.core.windows.net/{tier}/weather/{location.lower()}/{dt.year}/{dt.month:02d}/{dt.day:02d}\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_mounted_folder_path(dt, tier, location):\r\n",
					"    job_id = mssparkutils.env.getJobId()\r\n",
					"    return f\"/synfs/{job_id}/owmadls/{tier}/weather/{location.lower()}/{dt.year}/{dt.month:02d}/{dt.day:02d}\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def convert_to_dt(dt_string):\r\n",
					"    return datetime.strptime(dt_string, \"%Y-%m-%d %H:%M:%S\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_files_by_day(dt, tier, location):\r\n",
					"    try:\r\n",
					"        mssparkutils.fs.mount(\r\n",
					"        \"abfss://dataplatform@owmadls001.dfs.core.windows.net/\",\r\n",
					"        \"/owmadls\",\r\n",
					"        {\"linkedService\": \"owm-syn-001-WorkspaceDefaultStorage\"})\r\n",
					"    except:\r\n",
					"        pass\r\n",
					"\r\n",
					"    folder_path = get_mounted_folder_path(dt, tier, location)\r\n",
					"\r\n",
					"    if os.path.exists(folder_path):\r\n",
					"        return os.listdir(folder_path)\r\n",
					"    else:\r\n",
					"        return []"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def union_df_list(df_list):\r\n",
					"    df = df_list[0]\r\n",
					"    if len(df_list) > 1:\r\n",
					"        for next_df in df_list[1:]:\r\n",
					"            df = df.union(next_df)\r\n",
					"    return df"
				],
				"execution_count": null
			}
		]
	}
}