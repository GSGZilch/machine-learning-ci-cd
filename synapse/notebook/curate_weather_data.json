{
	"name": "curate_weather_data",
	"properties": {
		"folder": {
			"name": "P02 - Data Transformation"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkSmallCpu",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "41c52e64-1779-4b74-8757-c4d838dc597d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c9a2b097-83d7-4ec1-8355-dbd181b27e99/resourceGroups/om-ml-ci-cd/providers/Microsoft.Synapse/workspaces/owm-syn-001/bigDataPools/SparkSmallCpu",
				"name": "SparkSmallCpu",
				"type": "Spark",
				"endpoint": "https://owm-syn-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmallCpu",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import timedelta\r\n",
					"import pandas as pd\r\n",
					"import json"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Parameter cell to define default values for notebook input parameters\r\n",
					"pipeline_trigger_time = \"2022-06-22 12:00:00\""
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run _utils/constants"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run _utils/pyspark_helper_functions"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"times = [\r\n",
					"    \"2022-06-10 12:00:00\",\r\n",
					"    \"2022-06-11 12:00:00\",\r\n",
					"    \"2022-06-12 12:00:00\",\r\n",
					"    \"2022-06-13 12:00:00\",\r\n",
					"    \"2022-06-14 12:00:00\",\r\n",
					"    \"2022-06-15 12:00:00\",\r\n",
					"    \"2022-06-16 12:00:00\",\r\n",
					"    \"2022-06-17 12:00:00\",\r\n",
					"    \"2022-06-18 12:00:00\",\r\n",
					"    \"2022-06-19 12:00:00\",\r\n",
					"    \"2022-06-20 12:00:00\",\r\n",
					"    \"2022-06-21 12:00:00\",\r\n",
					"    \"2022-06-22 12:00:00\",\r\n",
					"]"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for pipeline_trigger_time in times:\r\n",
					"    for location in LOCATIONS:\r\n",
					"        print(f\"Starting {location} for {pipeline_trigger_time}\")\r\n",
					"        location = location.lower()\r\n",
					"\r\n",
					"        # get all filenames from last day\r\n",
					"        dt = convert_to_dt(pipeline_trigger_time)\r\n",
					"        dt_minus = dt - timedelta(days=1)\r\n",
					"\r\n",
					"        file_names = get_files_by_day(dt_minus, 'bronze', location)\r\n",
					"        folder_path = get_mounted_path_by_day(dt_minus, 'bronze', location)\r\n",
					"\r\n",
					"        file_list = []\r\n",
					"        for file_name in file_names:\r\n",
					"            with open(os.path.join(folder_path, file_name), \"rb\") as f:\r\n",
					"                file = json.load(f)\r\n",
					"            file_list.append(file)\r\n",
					"\r\n",
					"        df_list = []\r\n",
					"        for file in file_list:\r\n",
					"            tmp_df = pd.json_normalize(file)\r\n",
					"            tmp_df = tmp_df.explode('current.weather').to_dict(orient='records')\r\n",
					"            tmp_df = pd.json_normalize(tmp_df)\r\n",
					"            df_list.append(tmp_df)\r\n",
					"\r\n",
					"        df = pd.concat(df_list)\r\n",
					"\r\n",
					"        df.columns = clean_column_names(df)\r\n",
					"\r\n",
					"        output_path = get_adls_path_by_day(dt_minus, 'silver', location)\r\n",
					"\r\n",
					"        df.to_csv(f\"{output_path}/weather_{dt_minus.year}{dt_minus.month:02d}{dt_minus.day:02d}.csv\", index=False)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"a = df.columns.tolist()\r\n",
					"\r\n",
					"for i, col in enumerate(a):\r\n",
					"    if \"current.\" in col:\r\n",
					"        col_name = col.replace(\"current.\", \"\")\r\n",
					"        if \"weather.\" in col_name:\r\n",
					"            col_name = col_name.replace(\".\", \"_\")\r\n",
					"    else:\r\n",
					"        col_name = col\r\n",
					"        \r\n",
					"    if col_name.endswith(\".1h\"):\r\n",
					"        col_name = col_name.split(\".\")[0]\r\n",
					"\r\n",
					"    a[i] = col_name\r\n",
					"\r\n",
					"a"
				],
				"execution_count": 38
			}
		]
	}
}