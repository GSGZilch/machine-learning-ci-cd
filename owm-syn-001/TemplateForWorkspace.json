{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "owm-syn-001"
		},
		"owm-syn-001-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'owm-syn-001-WorkspaceDefaultSqlServer'"
		},
		"ls_kv_main_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mlcicd-kv-001.vault.azure.net/"
		},
		"ls_owm_endpoint_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.openweathermap.org/data/2.5"
		},
		"ls_rest_owm_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.openweathermap.org/data/2.5"
		},
		"owm-syn-001-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://owmadls001.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/P01 - Data Ingestion')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Weather Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL - Copy Weather Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dateAndTimeOfImport": {
									"value": "@{formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd HH:mm:ss')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "_LoadEntity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL - Copy Weather Data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/P02 - Data Transformation')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Curate Weather Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL - Curate Weather Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dateAndTimeOfImport": {
									"value": "@{formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd HH:mm:ss')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "_LoadEntity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL - Curate Weather Data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL - Copy Weather Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Weather Data - Brussels",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "50.846698",
									"lon": "4.352522"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "brussels"
								}
							}
						]
					},
					{
						"name": "Get API Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mlcicd-kv-001.vault.azure.net/secrets/openweathermap-api-key/e81899b254ad4eea8abcf5cf713b9d02?api-version=7.0",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy Weather Data - Dublin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "53.268889",
									"lon": "-6.196880"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "dublin"
								}
							}
						]
					},
					{
						"name": "Copy Weather Data - Lisbon",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "38.722099",
									"lon": "-9.139568"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "lisbon"
								}
							}
						]
					},
					{
						"name": "Copy Weather Data - Budapest",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "47.494512",
									"lon": "19.051484"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "budapest"
								}
							}
						]
					},
					{
						"name": "Copy Weather Data - Rome",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "41.899982",
									"lon": "12.498880"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "rome"
								}
							}
						]
					},
					{
						"name": "Copy Weather Data - Copenhagen",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "55.679559",
									"lon": "12.572005"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "copenhagen"
								}
							}
						]
					},
					{
						"name": "Copy Weather Data - Prague",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "50.071028",
									"lon": "14.436498"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "prague"
								}
							}
						]
					},
					{
						"name": "Copy Weather Data - Athens",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_owm_json",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('Get API Key').output.value",
										"type": "Expression"
									},
									"lat": "37.978750",
									"lon": "23.728545"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_synw_json",
								"type": "DatasetReference",
								"parameters": {
									"tier": "bronze",
									"dateAndTimeOfImport": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"location": "athens"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dateAndTimeOfImport": {
						"type": "string"
					}
				},
				"folder": {
					"name": "P01 - Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_rest_owm_json')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls_synw_json')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL - Curate Weather Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Curate Weather Data - All Locations",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "curate_weather_data",
								"type": "NotebookReference"
							},
							"parameters": {
								"pipeline_trigger_time": {
									"value": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkSmallCpu",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dateAndTimeOfImport": {
						"type": "string"
					}
				},
				"folder": {
					"name": "P02 - Data Transformation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/curate_weather_data')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkSmallCpu')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL - Ingest Weather Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Weather - All Locations",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ingest_owm_data",
								"type": "NotebookReference"
							},
							"parameters": {
								"pipeline_trigger_time": {
									"value": {
										"value": "@pipeline().parameters.dateAndTimeOfImport",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkSmallCpu",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dateAndTimeOfImport": {
						"type": "string"
					}
				},
				"folder": {
					"name": "P01 - Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/ingest_owm_data')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkSmallCpu')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL - Main')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "P01 - Data Ingestion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "P01 - Data Ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "P02 - Data Transformation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "P01 - Data Ingestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "P02 - Data Transformation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/P01 - Data Ingestion')]",
				"[concat(variables('workspaceId'), '/pipelines/P02 - Data Transformation')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_synw_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "owm-syn-001-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tier": {
						"type": "string"
					},
					"dateAndTimeOfImport": {
						"type": "string"
					},
					"location": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "weather_@{formatDateTime(dataset().dateAndTimeOfImport, 'yyyyMMdd-hhmmss')}.csv",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{dataset().tier}/weather/@{dataset().location}/@{formatDateTime(dataset().dateAndTimeOfImport, 'yyyy/MM/dd')}",
							"type": "Expression"
						},
						"fileSystem": "dataplatform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/owm-syn-001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_synw_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "owm-syn-001-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tier": {
						"type": "string"
					},
					"dateAndTimeOfImport": {
						"type": "string"
					},
					"location": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "weather_@{formatDateTime(dataset().dateAndTimeOfImport, 'yyyyMMdd-hhmmss')}.json",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{dataset().tier}/weather/@{dataset().location}/@{formatDateTime(dataset().dateAndTimeOfImport, 'yyyy/MM/dd')}",
							"type": "Expression"
						},
						"fileSystem": "dataplatform"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/owm-syn-001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_owm_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_owm_endpoint",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"key": {
						"type": "string"
					},
					"lat": {
						"type": "string"
					},
					"lon": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "onecall?appid=eff60f0b7623201baa64352394729655&exclude=minutely,hourly,daily&lat=50&lon=50",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_owm_endpoint')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_rest_owm_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_rest_owm",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"appid": {
						"type": "string"
					},
					"lat": {
						"type": "string"
					},
					"lon": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "onecall?appid=@{dataset().appid}&exclude=minutely,hourly,daily&lat=@{dataset().lat}&lon=@{dataset().lon}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_rest_owm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_kv_main')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_kv_main_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_owm_endpoint')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_owm_endpoint_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_rest_owm')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_rest_owm_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/owm-syn-001-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('owm-syn-001-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/owm-syn-001-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('owm-syn-001-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ScheduledCurate')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "P02 - Data Transformation",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-23T02:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/P02 - Data Transformation')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TumblingIngestion')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "P01 - Data Ingestion",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2022-06-09T20:04:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/P01 - Data Ingestion')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/constants')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "_utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bb566c0f-f2b2-43b1-a60f-de34fe34d6b3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"LOCATIONS = {\r\n",
							"    \"BRUSSELS\": {\r\n",
							"        \"lat\": 50.846698,\r\n",
							"        \"lon\": 4.352522\r\n",
							"    },\r\n",
							"    \"DUBLIN\": {\r\n",
							"        \"lat\": 53.268889, \r\n",
							"        \"lon\": -6.196880\r\n",
							"    },\r\n",
							"    \"LISBON\": {\r\n",
							"        \"lat\": 38.722099, \r\n",
							"        \"lon\": -9.139568\r\n",
							"    },\r\n",
							"    \"BUDAPEST\": {\r\n",
							"        \"lat\": 47.494512, \r\n",
							"        \"lon\": 19.051484\r\n",
							"    },\r\n",
							"    \"ROME\": {\r\n",
							"        \"lat\": 41.899982, \r\n",
							"        \"lon\": 12.498880\r\n",
							"    },\r\n",
							"    \"COPENHAGEN\": {\r\n",
							"        \"lat\": 55.679559, \r\n",
							"        \"lon\": 12.572005\r\n",
							"    },\r\n",
							"    \"PRAGUE\": {\r\n",
							"        \"lat\": 50.071028, \r\n",
							"        \"lon\": 14.436498\r\n",
							"    },\r\n",
							"    \"DUBLIN\": {\r\n",
							"        \"lat\": 37.978750, \r\n",
							"        \"lon\": 23.728545\r\n",
							"    }\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"OWM_COLUMNS = [\r\n",
							"    \"LATITUDE\",\r\n",
							"    \"LONGITUDE\",\r\n",
							"    \"TIMEZONE\",\r\n",
							"    \"TIMEZONE_OFFSET\",\r\n",
							"    \"DATETIME\",\r\n",
							"    \"SUNRISE\",\r\n",
							"    \"SUNSET\",\r\n",
							"    \"TEMPERATURE\",\r\n",
							"    \"FEELS_LIKE\",\r\n",
							"    \"PRESSURE\",\r\n",
							"    \"HUMIDITY\",\r\n",
							"    \"DEW_POINT\",\r\n",
							"    \"UVI\",\r\n",
							"    \"CLOUDS\",\r\n",
							"    \"VISIBILTY\",\r\n",
							"    \"WIND_SPEED\",\r\n",
							"    \"WIND_DEGREE\",\r\n",
							"    \"WEATHER_ID\",\r\n",
							"    \"WEATHER_MAIN\",\r\n",
							"    \"WEATHER_DESCRIPTION\",\r\n",
							"    \"WEATHER_ICON\",\r\n",
							"    \"RAIN\",\r\n",
							"    \"WIND_GUST\"\r\n",
							"]"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/curate_weather_data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "P02 - Data Transformation"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkSmallCpu",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "24c9ff02-a4f0-4ab7-af07-3ce6111b6c16"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c9a2b097-83d7-4ec1-8355-dbd181b27e99/resourceGroups/om-ml-ci-cd/providers/Microsoft.Synapse/workspaces/owm-syn-001/bigDataPools/SparkSmallCpu",
						"name": "SparkSmallCpu",
						"type": "Spark",
						"endpoint": "https://owm-syn-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmallCpu",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from datetime import timedelta\r\n",
							"import pandas as pd\r\n",
							"import json"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# TO DO\r\n",
							"# Dublin/Brussels data is mixed in brussels folder until 22nd of June"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Parameter cell to define default values for notebook input parameters\r\n",
							"pipeline_trigger_time = \"2022-06-22 12:00:00\""
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run _utils/constants"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run _utils/pyspark_helper_functions"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"for location in LOCATIONS:\r\n",
							"    print(f\"Starting {location} for {pipeline_trigger_time}\")\r\n",
							"    location = location.lower()\r\n",
							"\r\n",
							"    # get all filenames from last day\r\n",
							"    dt = convert_to_dt(pipeline_trigger_time)\r\n",
							"    dt_minus = dt - timedelta(days=1)\r\n",
							"\r\n",
							"    file_names = get_files_by_day(dt_minus, 'bronze', location)\r\n",
							"    folder_path = get_mounted_path_by_day(dt_minus, 'bronze', location)\r\n",
							"\r\n",
							"    file_list = []\r\n",
							"    for file_name in file_names:\r\n",
							"        with open(os.path.join(folder_path, file_name), \"rb\") as f:\r\n",
							"            file = json.load(f)\r\n",
							"        file_list.append(file)\r\n",
							"\r\n",
							"    df_list = []\r\n",
							"    for file in file_list:\r\n",
							"        tmp_df = pd.json_normalize(file)\r\n",
							"        tmp_df = tmp_df.explode('current.weather').to_dict(orient='records')\r\n",
							"        tmp_df = pd.json_normalize(tmp_df)\r\n",
							"        df_list.append(tmp_df)\r\n",
							"\r\n",
							"    if len(df_list) == 0:\r\n",
							"        continue\r\n",
							"\r\n",
							"    df = pd.concat(df_list)\r\n",
							"\r\n",
							"    df.columns = clean_column_names(df)\r\n",
							"\r\n",
							"    output_path = get_adls_path_by_day(dt_minus, 'silver', location)\r\n",
							"\r\n",
							"    df.to_csv(f\"{output_path}/weather_{dt_minus.year}{dt_minus.month:02d}{dt_minus.day:02d}.csv\", index=False)"
						],
						"outputs": [],
						"execution_count": 45
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingest_owm_data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "P01 - Data Ingestion"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkSmallCpu",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d141035a-16af-421e-9743-637a6f98b93c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c9a2b097-83d7-4ec1-8355-dbd181b27e99/resourceGroups/om-ml-ci-cd/providers/Microsoft.Synapse/workspaces/owm-syn-001/bigDataPools/SparkSmallCpu",
						"name": "SparkSmallCpu",
						"type": "Spark",
						"endpoint": "https://owm-syn-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmallCpu",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import requests\r\n",
							"from pyspark.sql.types import StructType, StructField, StringType, ArrayType, FloatType, IntegerType\r\n",
							"from pyspark.sql import SparkSession, Row\r\n",
							"from pyspark.sql.functions import *\r\n",
							"import json\r\n",
							"import pandas as pd\r\n",
							"from datetime import datetime\r\n",
							"from csv import writer"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Parameter cell to define default values for notebook input parameters\r\n",
							"pipeline_trigger_time = \"2022-01-01 12:00:00\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run _utils/pyspark_helper_functions"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run _utils/location_mapping"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"key_vault_name = 'mlcicd-kv-001'\r\n",
							"\r\n",
							"api_endpoint = TokenLibrary.getSecret(key_vault_name, 'openweathermap-api-endpoint', 'ls_kv_main')\r\n",
							"api_key = TokenLibrary.getSecret(key_vault_name, 'openweathermap-api-key', 'ls_kv_main')\r\n",
							"\r\n",
							"\r\n",
							"for location in LOCATION_COORDS:\r\n",
							"    lat = LOCATION_COORDS[location.upper()][\"lat\"]\r\n",
							"    lon = LOCATION_COORDS[location.upper()][\"lon\"]\r\n",
							"\r\n",
							"    params = {\r\n",
							"        \"lat\": lat,\r\n",
							"        \"lon\": lon,\r\n",
							"        \"appid\": api_key,\r\n",
							"        \"exclude\": \"minutely,hourly,daily\"\r\n",
							"    }\r\n",
							"\r\n",
							"    resp = requests.get(api_endpoint, params=params)\r\n",
							"    data = resp.json()\r\n",
							"    print(f\"Status code: {resp.status_code}. Reason: {resp.reason}.\")\r\n",
							"\r\n",
							"    data[\"timestamp\"] = pipeline_trigger_time\r\n",
							"\r\n",
							"    df = pd.json_normalize(data)\r\n",
							"    df = df.explode('current.weather').to_dict(orient='records')\r\n",
							"    df = pd.json_normalize(df)\r\n",
							"\r\n",
							"    dt = convert_to_dt(pipeline_trigger_time)\r\n",
							"\r\n",
							"    folder_path = get_adls_folder_path(dt, 'bronze', location)\r\n",
							"\r\n",
							"    file_name = f\"weather_{dt.year}{dt.month:02d}{dt.day:02d}.csv\"\r\n",
							"\r\n",
							"    adls_files = get_files_by_day(dt, 'bronze', location)\r\n",
							"\r\n",
							"    if file_name in adls_files:\r\n",
							"        folder_path = get_mounted_folder_path(dt, 'bronze', location)\r\n",
							"\r\n",
							"        row = df.iloc[0, :].values.tolist()\r\n",
							"\r\n",
							"        with open(f\"{folder_path}/{file_name}\", 'a', newline='') as f:\r\n",
							"            writer_obj = writer(f)\r\n",
							"            writer_obj.writerow(row)\r\n",
							"    else:\r\n",
							"        output_path = f\"{folder_path}/{file_name}\"\r\n",
							"\r\n",
							"        df.to_csv(output_path, index=False)"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pyspark_helper_functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "_utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1674c1bc-c49e-40d9-b1e7-5105effbc4bd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os\r\n",
							"from datetime import datetime\r\n",
							"from pyspark.sql import SparkSession \r\n",
							"from pyspark.sql.types import * "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"def pyspark_read_csv(path):\r\n",
							"    df = spark.read.load(path, \r\n",
							"        format='csv', \r\n",
							"        header=True)\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def write_dataframe(df, path, partitions, csv=True, parquet=False, json=False):\r\n",
							"    df = df.repartition(partitions)\r\n",
							"\r\n",
							"    if csv: df.write.csv(f\"{path}csv/\", mode='overwrite', header = 'true') \r\n",
							"    if parquet: df.write.parquet(f\"{path}parquet/\", mode='overwrite') \r\n",
							"    if json: df.write.json(f\"{path}json/\", mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_adls_path_by_day(dt, tier, location):\r\n",
							"    return f\"abfss://dataplatform@owmadls001.dfs.core.windows.net/{tier}/weather/{location.lower()}/{dt.year}/{dt.month:02d}/{dt.day:02d}\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def mount_adls(ls_name=\"owm-syn-001-WorkspaceDefaultStorage\", mount_point=\"/owmadls\"):\r\n",
							"    mssparkutils.fs.mount(\r\n",
							"        \"abfss://dataplatform@owmadls001.dfs.core.windows.net/\",\r\n",
							"        mount_point,\r\n",
							"        {\"linkedService\": ls_name})"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_mounted_path_by_day(dt, tier, location):\r\n",
							"    job_id = mssparkutils.env.getJobId()\r\n",
							"    return f\"/synfs/{job_id}/owmadls/{tier}/weather/{location.lower()}/{dt.year}/{dt.month:02d}/{dt.day:02d}\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_mounted_path_by_source(tier):\r\n",
							"    job_id = mssparkutils.env.getJobId()\r\n",
							"    return f\"/synfs/{job_id}/owmadls/{tier}/weather\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def convert_to_dt(dt_string):\r\n",
							"    return datetime.strptime(dt_string, \"%Y-%m-%d %H:%M:%S\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_files_by_day(dt, tier, location):\r\n",
							"    try:\r\n",
							"        mount_adls()\r\n",
							"    except:\r\n",
							"        pass\r\n",
							"\r\n",
							"    folder_path = get_mounted_path_by_day(dt, tier, location)\r\n",
							"\r\n",
							"    if os.path.exists(folder_path):\r\n",
							"        return os.listdir(folder_path)\r\n",
							"    else:\r\n",
							"        return []"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def union_df_list(df_list):\r\n",
							"    df = df_list[0]\r\n",
							"    if len(df_list) > 1:\r\n",
							"        for next_df in df_list[1:]:\r\n",
							"            df = df.union(next_df)\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def clean_column_names(df):\r\n",
							"    columns = df.columns.tolist()\r\n",
							"\r\n",
							"    for i, col in enumerate(columns):\r\n",
							"        if \"current.\" in col:\r\n",
							"            col_name = col.replace(\"current.\", \"\")\r\n",
							"            if \"weather.\" in col_name:\r\n",
							"                col_name = col_name.replace(\".\", \"_\")\r\n",
							"        else:\r\n",
							"            col_name = col\r\n",
							"            \r\n",
							"        if col_name.endswith(\".1h\"):\r\n",
							"            col_name = col_name.split(\".\")[0]\r\n",
							"\r\n",
							"        columns[i] = col_name\r\n",
							"\r\n",
							"    return columns"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkSmallCpu')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 90
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}