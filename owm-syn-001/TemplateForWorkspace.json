{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "owm-syn-001"
		},
		"owm-syn-001-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'owm-syn-001-WorkspaceDefaultSqlServer'"
		},
		"owm-syn-001-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://owmadls001.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/PL - Ingest Weather Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Weather Data",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ingest_owm_data",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkSmallCpu",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "P01 - Data Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/ingest_owm_data')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkSmallCpu')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/owm-syn-001-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('owm-syn-001-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/owm-syn-001-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('owm-syn-001-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingest_owm_data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkSmallCpu",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "43b35b77-ec3b-445d-af8d-4a3118cf6378"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c9a2b097-83d7-4ec1-8355-dbd181b27e99/resourceGroups/om-ml-ci-cd/providers/Microsoft.Synapse/workspaces/owm-syn-001/bigDataPools/SparkSmallCpu",
						"name": "SparkSmallCpu",
						"type": "Spark",
						"endpoint": "https://owm-syn-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmallCpu",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Parameter cell to define default values for notebook input parameters\r\n",
							"pipeline_trigger_time = \"2022-01-01 12:00:00\"\r\n",
							"location = \"brussels\""
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import requests\r\n",
							"from pyspark.sql.types import StructType, StructField, StringType, ArrayType, FloatType, IntegerType\r\n",
							"from pyspark.sql import SparkSession, Row\r\n",
							"from pyspark.sql.functions import *\r\n",
							"import json\r\n",
							"import pandas as pd\r\n",
							"from datetime import datetime"
						],
						"outputs": [],
						"execution_count": 84
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run utils/location_mapping"
						],
						"outputs": [],
						"execution_count": 85
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"key_vault_name = 'mlcicd-kv-001'\r\n",
							"\r\n",
							"api_endpoint = TokenLibrary.getSecret(key_vault_name, 'openweathermap-api-endpoint')\r\n",
							"api_key = TokenLibrary.getSecret(key_vault_name, 'openweathermap-api-key')\r\n",
							"\r\n",
							"lat = LOCATION_COORDS[location.upper()][\"lat\"]\r\n",
							"lon = LOCATION_COORDS[location.upper()][\"lon\"]\r\n",
							"\r\n",
							"params = {\r\n",
							"    \"lat\": lat,\r\n",
							"    \"lon\": lon,\r\n",
							"    \"appid\": api_key,\r\n",
							"    \"exclude\": \"minutely,hourly,daily\"\r\n",
							"}\r\n",
							"\r\n",
							"resp = requests.get(api_endpoint, params=params)\r\n",
							"print(f\"Status code: {resp.status_code}. Reason: {resp.reason}.\")"
						],
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data = {\r\n",
							"  \"lat\": 39.31,\r\n",
							"  \"lon\": -74.5,\r\n",
							"  \"timezone\": \"America/New_York\",\r\n",
							"  \"timezone_offset\": -18000,\r\n",
							"  \"current\": {\r\n",
							"    \"dt\": 1646318698,\r\n",
							"    \"sunrise\": 1646306882,\r\n",
							"    \"sunset\": 1646347929,\r\n",
							"    \"temp\": 282.21,\r\n",
							"    \"feels_like\": 278.41,\r\n",
							"    \"pressure\": 1014,\r\n",
							"    \"humidity\": 65,\r\n",
							"    \"dew_point\": 275.99,\r\n",
							"    \"uvi\": 2.55,\r\n",
							"    \"clouds\": 40,\r\n",
							"    \"visibility\": 10000,\r\n",
							"    \"wind_speed\": 8.75,\r\n",
							"    \"wind_deg\": 360,\r\n",
							"    \"wind_gust\": 13.89,\r\n",
							"    \"weather\": [\r\n",
							"      {\r\n",
							"        \"id\": 802,\r\n",
							"        \"main\": \"Clouds\",\r\n",
							"        \"description\": \"scattered clouds\",\r\n",
							"        \"icon\": \"03d\"\r\n",
							"      }\r\n",
							"    ]\r\n",
							"  }\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": 86
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"data[\"timestamp\"] = pipeline_trigger_time"
						],
						"outputs": [],
						"execution_count": 87
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"column_names = [\r\n",
							"    \"lat\",\r\n",
							"    \"lon\",\r\n",
							"    \"timezone\",\r\n",
							"    \"timezone_offset\",\r\n",
							"    \"timestamp\",\r\n",
							"    \"dt\",\r\n",
							"    \"sunrise\",\r\n",
							"    \"sunset\",\r\n",
							"    \"temp\",\r\n",
							"    \"feels_like\",\r\n",
							"    \"pressure\",\r\n",
							"    \"humidity\",\r\n",
							"    \"dew_point\",\r\n",
							"    \"uvi\",\r\n",
							"    \"clouds\",\r\n",
							"    \"visibility\",\r\n",
							"    \"wind_speed\",\r\n",
							"    \"wind_deg\",\r\n",
							"    \"wind_gust\",\r\n",
							"    \"weather_id\",\r\n",
							"    \"weather_main\",\r\n",
							"    \"weather_description\",\r\n",
							"    \"weather_icon\"\r\n",
							"]"
						],
						"outputs": [],
						"execution_count": 88
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = pd.json_normalize(data)\r\n",
							"df = df.explode('current.weather').to_dict(orient='records')\r\n",
							"df = pd.json_normalize(df)\r\n",
							"df.columns = column_names"
						],
						"outputs": [],
						"execution_count": 89
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dt = datetime.strptime(pipeline_trigger_time, \"%Y-%m-%d %H:%M:%S\")\r\n",
							"\r\n",
							"adls_name = \"owmadls001\"\r\n",
							"container_name = \"dataplatform\"\r\n",
							"\r\n",
							"adls_url = f\"abfss://{container_name}@{adls_name}.dfs.core.windows.net/\"\r\n",
							"\r\n",
							"folder_path = f\"bronze/weather/{location.lower()}/{dt.year}/{dt.month:02d}/{dt.day:02d}\"\r\n",
							"\r\n",
							"file_name = f\"weather_{dt.year}{dt.month:02d}{dt.day:02d}-{dt.hour:02d}{dt.minute:02d}{dt.second:02d}.csv\"\r\n",
							"\r\n",
							"output_path = f\"{adls_url}/{folder_path}/{file_name}\"\r\n",
							"\r\n",
							"df.to_csv(output_path, index=False)"
						],
						"outputs": [],
						"execution_count": 90
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkSmallCpu')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 90
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/location_mapping')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "752d52bf-fa7b-4673-b9c0-fed35578a35e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"LOCATION_COORDS = {\r\n",
							"    \"BRUSSELS\": {\r\n",
							"        \"lat\": 50.846698,\r\n",
							"        \"lon\": 4.352522\r\n",
							"    },\r\n",
							"    \"DUBLIN\": {\r\n",
							"        \"lat\": 53.268889, \r\n",
							"        \"lon\": -6.196880\r\n",
							"    }\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		}
	]
}